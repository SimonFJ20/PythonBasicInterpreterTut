From a0bc8e7fc094095824a91fcf51b826d2d949a9f3 Mon Sep 17 00:00:00 2001
From: SimonFJ20 <simonfromjakobsen@gmail.com>
Date: Tue, 19 Apr 2022 21:32:14 +0200
Subject: [PATCH] list and linked

---
 .clang-format     |  3 +++
 compile_flags.txt |  3 +++
 linked_list.c     | 58 +++++++++++++++++++++++++++++++++++++++--------
 list.c            |  7 +++---
 main.c            |  3 ++-
 utils.h           | 13 ++++-------
 6 files changed, 64 insertions(+), 23 deletions(-)
 create mode 100644 .clang-format
 create mode 100644 compile_flags.txt

diff --git a/.clang-format b/.clang-format
new file mode 100644
index 0000000..b1205f8
--- /dev/null
+++ b/.clang-format
@@ -0,0 +1,3 @@
+Language: Cpp
+BasedOnStyle: WebKit
+IndentWidth: 4
\ No newline at end of file
diff --git a/compile_flags.txt b/compile_flags.txt
new file mode 100644
index 0000000..e90fcd4
--- /dev/null
+++ b/compile_flags.txt
@@ -0,0 +1,3 @@
+-std=c17
+-Wall
+-Werror
diff --git a/linked_list.c b/linked_list.c
index 9ff56f0..ddc8cfc 100644
--- a/linked_list.c
+++ b/linked_list.c
@@ -1,4 +1,6 @@
 #include <stdlib.h>
+#include <stdbool.h>
+#include <assert.h>
 #include "utils.h"
 
 LinkedListNode* new_linked_list_node(LinkedListNode* prev, LinkedListNode* next, void* value)
@@ -17,6 +19,14 @@ void delete_linked_list_node(LinkedListNode* self)
     free(self);
 }
 
+void linked_list_node_short_circuit_child_and_parent(LinkedListNode* self)
+{
+    assert(self->prev);
+    self->prev->next = self->next;
+    if (self->next)
+        self->next->prev = self->prev;
+}
+
 LinkedList* new_linked_list()
 {
     LinkedList* self = calloc(1, sizeof (LinkedList));
@@ -29,8 +39,8 @@ LinkedList* new_linked_list()
 
 void linked_list_add(LinkedList* self, void* value)
 {
-    self->length = 0;
-    if (!self->head) {
+    self->length++;
+    if (self->head == NULL) {
         self->head = new_linked_list_node(NULL, NULL, value);
     } else {
         LinkedListNode* node = self->head;
@@ -43,38 +53,66 @@ void linked_list_add(LinkedList* self, void* value)
 LinkedListNode* linked_list_node_at(LinkedList* self, int index)
 {
     if (index >= 0) {
-        ASSERT(index < self->length, "index out of bounds");
+        assert(index < self->length);
         LinkedListNode* node = self->head;
         for (int i = 0; i < index; i++)
             node = node->next;
         return node;
     } else {
-        return linked_list_get(self, self->length - index);
+        return linked_list_at(self, self->length - index);
     }
 }
 
 void* linked_list_at(LinkedList* self, int index)
 {
-    return linked_list_node_at(self, index);
+    return linked_list_node_at(self, index)->value;
+}
+
+void linked_list_delete_node(LinkedList* self, LinkedListNode* node, bool is_head)
+{
+    node->next->prev = NULL;
+    if (is_head)
+        self->head = node->next;
+    else
+        linked_list_node_short_circuit_child_and_parent(node);
+    delete_linked_list_node(node);
 }
 
 void* linked_list_remove_at(LinkedList* self, int index)
 {
-    return NULL;
+    assert(index < self->length);
+    LinkedListNode* node = index == 0 ? self->head : linked_list_node_at(self, index);
+    void* value = node->value;
+    linked_list_delete_node(self, node, index == 0);
+    self->length--;
+    return value;
 }
 
-void* linked_list_remove(LinkedList* self, void* value)
+int linked_list_remove(LinkedList* self, void* value)
 {
-    return NULL;
+    int removed = 0;
+    LinkedListNode* node = self->head;
+    while (node) {
+        if (node->value == value) {
+            linked_list_delete_node(self, node, node == self->head);
+            removed++;
+        }
+        node = node->next;
+    }
+    return removed;
 }
 
 size_t linked_list_length(LinkedList* self)
 {
-    return 0;
+    return self->length;
 }
 
 void** linked_list_to_array(LinkedList* self)
 {
-    return NULL;
+    void** array = calloc(self->length, sizeof (void*));
+    int i = 0;
+    for (LinkedListNode* node = self->head; node; node = node->next)
+        array[i++] = node->value;
+    return array;
 }
 
diff --git a/list.c b/list.c
index 0b7fa53..b5e3697 100644
--- a/list.c
+++ b/list.c
@@ -1,4 +1,5 @@
 #include <stdlib.h>
+#include <assert.h>
 #include "utils.h"
 
 List* new_list()
@@ -19,8 +20,8 @@ void delete_list(List* self)
 
 void list_add(List* self, void* value)
 {
-    self->length++;
     if (self->length == 0) {
+        self->length++;
         self->values = calloc(1, sizeof (void*));
         self->values[0] = value;
     } else {
@@ -33,7 +34,7 @@ void list_add(List* self, void* value)
 void* list_at(List* self, int index)
 {
     if (index >= 0) {
-        ASSERT(index < self->length, "index out of bounds");
+        assert(index < self->length);
         return self->values[index];
     } else {
         return list_at(self, self->length - index);
@@ -44,7 +45,7 @@ void* list_remove(List* self, int index)
 {
     self->length--;
     if (index >= 0) {
-        ASSERT(index < self->length, "index out of bounds");
+        assert(index < self->length);
         return self->values[index];
     } else {
         return list_at(self, self->length - index);
diff --git a/main.c b/main.c
index 797527b..a4d2712 100644
--- a/main.c
+++ b/main.c
@@ -1,8 +1,9 @@
+#include "utils.h"
 #include <stdio.h>
 
 int main()
 {
-    printf("hello world\n");
+
 }
 
 
diff --git a/utils.h b/utils.h
index de89d7d..44c8aeb 100644
--- a/utils.h
+++ b/utils.h
@@ -4,12 +4,6 @@
 #include <stdlib.h>
 #include <stdio.h>
 
-#define ASSERT(v, msg) \
-    if (!(v)) { \
-        printf("ASSERTATION FAILED: %s\nat %s:%d\n", msg, __FILE__, __LINE__); \
-        exit(1); \
-    }
-
 typedef struct {
     void** values;
     size_t length;
@@ -26,7 +20,8 @@ size_t list_length(List* self);
 void** list_to_array(List* self);
 
 typedef struct LinkedListNodeStruct {
-    struct LinkedListNodeStruct* prev, * next;
+    struct LinkedListNodeStruct* prev;
+    struct LinkedListNodeStruct* next;
     void* value;
 } LinkedListNode;
 
@@ -34,7 +29,7 @@ LinkedListNode* new_linked_list_node(LinkedListNode* prev, LinkedListNode* next,
 void delete_linked_list_node(LinkedListNode* self);
 
 typedef struct {
-    LinkedListNode head;
+    LinkedListNode* head;
     size_t length;
 } LinkedList;
 
@@ -44,7 +39,7 @@ void delete_linked_list();
 void linked_list_add(LinkedList* self, void* value);
 void* linked_list_at(LinkedList* self, int index);
 void* linked_list_remove_at(LinkedList* self, int index);
-void* linked_list_remove(LinkedList* self, void* value);
+int linked_list_remove(LinkedList* self, void* value);
 size_t linked_list_length(LinkedList* self);
 void** linked_list_to_array(LinkedList* self);
 
-- 
2.25.1

