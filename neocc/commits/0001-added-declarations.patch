From 3bf88a3b6dd42e0fbe1cade9cf732094feaefdc7 Mon Sep 17 00:00:00 2001
From: SimonFJ20 <simonfromjakobsen@gmail.com>
Date: Mon, 9 May 2022 02:46:06 +0200
Subject: [PATCH] added declarations

---
 lexer.c  |   2 +
 nodes.c  | 191 ++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 parser.c |  59 +++++++++++++++--
 parser.h |  65 ++++++++++++++++++-
 4 files changed, 306 insertions(+), 11 deletions(-)

diff --git a/lexer.c b/lexer.c
index bb70ad1..3795678 100644
--- a/lexer.c
+++ b/lexer.c
@@ -55,6 +55,8 @@ const char* token_type_to_string(TokenType type)
         return "TOKEN_TYPE_LBRACKET";
     case TOKEN_TYPE_RBRACKET:
         return "TOKEN_TYPE_RBRACKET";
+    case TOKEN_TYPE_COMMA:
+        return "TOKEN_TYPE_COMMA";
     case TOKEN_TYPE_ASSIGN:
         return "TOKEN_TYPE_ASSIGN";
     case TOKEN_TYPE_EQUAL:
diff --git a/nodes.c b/nodes.c
index a73a3f1..0b3fc31 100644
--- a/nodes.c
+++ b/nodes.c
@@ -17,6 +17,8 @@ const char* statement_node_type_to_string(StatementNodeType type)
         return "STATEMENT_TYPE_FUNC_DEF";
     case STATEMENT_TYPE_RETURN:
         return "STATEMENT_TYPE_RETURN";
+    case STATEMENT_TYPE_DECLARATION:
+        return "STATEMENT_TYPE_DECLARATION";
     case STATEMENT_TYPE_EXPRESSION:
         return "STATEMENT_TYPE_EXPRESSION";
     }
@@ -30,6 +32,8 @@ const char* expression_node_type_to_string(ExpressionNodeType type)
         return "EXPRESSION_TYPE_ASSIGNMENT";
     case EXPRESSION_TYPE_BINARY_OPERATION:
         return "EXPRESSION_TYPE_BINARY_OPERATION";
+    case EXPRESSION_TYPE_SYMBOL:
+        return "EXPRESSION_TYPE_SYMBOL";
     case EXPRESSION_TYPE_INT:
         return "EXPRESSION_TYPE_INT";
     }
@@ -45,6 +49,75 @@ const char* type_node_type_to_string(TypeNodeType type)
     assert(0 && "unreachable");
 }
 
+const char* declaration_node_type_to_string(DeclarationNodeType type)
+{
+    switch (type) {
+    case DECLARATION_TYPE_DEFAULT:
+        return "DECLARATION_TYPE_DEFAULT";
+    case DECLARATION_TYPE_INITIALIZATION:
+        return "DECLARATION_TYPE_INITIALIZATION";
+    }
+    assert(!"unreachable");
+}
+
+DeclarationNode* new_declaration_node(TypeNode* value_type, Token* target)
+{
+    static_assert(sizeof(Node) == 16, "incomplete implementation of Node");
+    static_assert(sizeof(DeclarationNode) == 40, "incomplete construction of DeclarationNode");
+    DeclarationNode* self = calloc(1, sizeof(DeclarationNode));
+    *self = (DeclarationNode) {
+        .delete = delete_declaration_node,
+        .to_string = declaration_node_to_string,
+        .node_type = DECLARATION_TYPE_DEFAULT,
+        .value_type = value_type,
+        .target = target,
+    };
+    return self;
+}
+
+void delete_declaration_node(DeclarationNode* self)
+{
+    self->value_type->delete (self->value_type);
+    delete_token(self->target);
+    free(self);
+}
+
+char* declaration_node_to_string(DeclarationNode* self)
+{
+    const char* node_type = declaration_node_type_to_string(self->node_type);
+    char* value_type = self->value_type->to_string(self->value_type);
+    char* target = token_to_string(self->target);
+
+    StringBuilder* sb = new_string_builder();
+    string_builder_write_fmt(sb, "%s {value_type: %s, target: %s}", node_type, value_type, target);
+    char* result = string_builder_c_string(sb);
+    delete_string_builder(sb);
+
+    free(value_type);
+    free(target);
+
+    return result;
+}
+
+char* declaration_nodes_to_string(List* declarations)
+{
+    StringBuilder* declarations_sb = new_string_builder();
+    bool first = true;
+    for (int i = 0; i < declarations->length(declarations); i++) {
+        if (first)
+            first = false;
+        else
+            string_builder_write(declarations_sb, ", ");
+        DeclarationNode* node = declarations->get(declarations, i);
+        char* node_str = node->to_string(node);
+        string_builder_write(declarations_sb, node_str);
+        free(node_str);
+    }
+    char* result = string_builder_c_string(declarations_sb);
+    delete_string_builder(declarations_sb);
+    return result;
+}
+
 FuncDefNode* new_func_def_node(
     Token* target,
     TypeNode* return_type,
@@ -141,6 +214,85 @@ char* return_node_to_string(ReturnNode* self)
     return buffer;
 }
 
+Initialization* new_initialization_node(TypeNode* value_type, Token* target, ExpressionNode* value)
+{
+    static_assert(sizeof(Node) == 16, "incomplete implementation of Node");
+    static_assert(sizeof(DeclarationNode) == 40, "incomplete implementation of DeclarationNode");
+    static_assert(sizeof(Initialization) == 48, "incomplete construction of Initialization");
+    Initialization* self = calloc(1, sizeof(Initialization));
+    *self = (Initialization) {
+        .delete = delete_initialization_node,
+        .to_string = initialization_node_to_string,
+        .node_type = DECLARATION_TYPE_DEFAULT,
+        .value_type = value_type,
+        .target = target,
+        .value = value,
+    };
+    return self;
+}
+
+void delete_initialization_node(Initialization* self)
+{
+    self->value_type->delete (self->value_type);
+    delete_token(self->target);
+    self->value->delete (self->value);
+    free(self);
+}
+
+char* initialization_node_to_string(Initialization* self)
+{
+    const char* node_type = declaration_node_type_to_string(self->node_type);
+    char* value_type = self->value_type->to_string(self->value_type);
+    char* target = token_to_string(self->target);
+    char* value = self->value->to_string(self->value);
+
+    StringBuilder* sb = new_string_builder();
+    string_builder_write_fmt(sb, "%s {value_type: %s, target: %s, value: %s}", node_type, value_type, target, value);
+    char* result = string_builder_c_string(sb);
+    delete_string_builder(sb);
+
+    free(value_type);
+    free(target);
+    free(value);
+
+    return result;
+}
+
+DeclStmtNode* new_declaration_statement_node(List* declarations)
+{
+    static_assert(sizeof(Node) == 16, "incomplete implementation of Node");
+    static_assert(sizeof(StatementNode) == 24, "incomplete implementation of StatementNode");
+    static_assert(sizeof(DeclStmtNode) == 32, "incomplete construction of DeclStmtNode");
+    DeclStmtNode* self = calloc(1, sizeof(DeclStmtNode));
+    *self = (DeclStmtNode) {
+        .delete = delete_declaration_statement_node,
+        .to_string = declaration_statement_node_to_string,
+        .node_type = STATEMENT_TYPE_DECLARATION,
+        .declarations = declarations,
+    };
+    return self;
+}
+
+void delete_declaration_statement_node(DeclStmtNode* self)
+{
+    list_delete_all_and_self(self->declarations, (void (*)(void*)) delete_node_inheriter);
+    free(self);
+}
+
+char* declaration_statement_node_to_string(DeclStmtNode* self)
+{
+    const char* node_type = statement_node_type_to_string(self->node_type);
+    char* declarations = declaration_nodes_to_string(self->declarations);
+
+    StringBuilder* sb = new_string_builder();
+    string_builder_write_fmt(sb, "%s {declarations: [%s]}", node_type, declarations);
+    char* result = string_builder_c_string(sb);
+    delete_string_builder(sb);
+
+    free(declarations);
+    return result;
+}
+
 ExprStmtNode* new_expression_statement_node(ExpressionNode* value)
 {
     static_assert(sizeof(Node) == 16, "incomplete implementation of Node");
@@ -213,8 +365,8 @@ char* keyword_type_node_to_string(KeywordTypeNode* self)
 const char* assignment_type_to_string(AssignmentType type)
 {
     switch (type) {
-    case ASSIGNMENT_TYPE_NONE:
-        return "ASSIGNMENT_TYPE_NONE";
+    case ASSIGNMENT_TYPE_DEFAULT:
+        return "ASSIGNMENT_TYPE_DEFAULT";
     }
     assert(!"unreachable");
 }
@@ -308,6 +460,40 @@ char* binary_operation_to_string(BinaryOperationNode* self)
     return result;
 }
 
+SymbolNode* new_symbol_node(Token* token)
+{
+    static_assert(sizeof(Node) == 16, "incomplete implementation of Node");
+    static_assert(sizeof(ExpressionNode) == 24, "incomplete implementation of ExpressionNode");
+    static_assert(sizeof(SymbolNode) == 32, "incomplete construction of SymbolNode");
+    SymbolNode* self = calloc(1, sizeof(SymbolNode));
+    *self = (SymbolNode) {
+        .delete = delete_symbol_node,
+        .to_string = symbol_node_to_string,
+        .node_type = EXPRESSION_TYPE_INT,
+        .token = token,
+    };
+    return self;
+}
+
+void delete_symbol_node(SymbolNode* self)
+{
+    free(self);
+}
+
+char* symbol_node_to_string(SymbolNode* self)
+{
+    const char* type = expression_node_type_to_string(self->node_type);
+    char* token = token_to_string(self->token);
+
+    char* buffer = calloc(8192, sizeof(char));
+    sprintf(buffer, "%s {token: %s}", type, token);
+    buffer = realloc(buffer, strlen(buffer) * sizeof(char) + 1);
+
+    free(token);
+
+    return buffer;
+}
+
 IntNode* new_int_node(Token* token)
 {
     static_assert(sizeof(Node) == 16, "incomplete implementation of Node");
@@ -330,7 +516,6 @@ void delete_int_node(IntNode* self)
 
 char* int_node_to_string(IntNode* self)
 {
-    static_assert(sizeof(Node) == 16, "incomplete implementation of Node");
     const char* type = expression_node_type_to_string(self->node_type);
     char* token = token_to_string(self->token);
 
diff --git a/parser.c b/parser.c
index a29c067..50720f5 100644
--- a/parser.c
+++ b/parser.c
@@ -43,9 +43,6 @@ StatementNode* parser_make_statement(Parser* self)
     switch (self->t->type) {
     case TOKEN_TYPE_KW_RETURN:
         result = (StatementNode*) parser_make_return(self);
-        if (self->t->type != TOKEN_TYPE_EOL)
-            assert(!"expected ';'");
-        parser_skip_newline(self);
         break;
     case TOKEN_TYPE_KW_VOID:
     case TOKEN_TYPE_KW_INT:
@@ -61,6 +58,7 @@ ReturnNode* parser_make_return(Parser* self)
 {
     parser_next(self);
     ExpressionNode* value = parser_make_expression(self);
+    check_and_skip_newline(self);
     return new_return_node(value);
 }
 
@@ -71,8 +69,13 @@ StatementNode* parser_make_declaration_definition_or_initialization(Parser* self
         assert(!"unexpected token, expected identifier");
     Token* target = self->t;
     parser_next(self);
-    if (self->t->type != TOKEN_TYPE_LPAREN)
-        assert(!"unexpected token, expected '(', declarations not implemented btw");
+    if (self->t->type == TOKEN_TYPE_LPAREN)
+        return (StatementNode*) parser_resume_function_definition(self, target, type);
+    return (StatementNode*) parser_resume_declaration_statement(self, target, type);
+}
+
+FuncDefNode* parser_resume_function_definition(Parser* self, Token* target, TypeNode* type)
+{
     parser_next(self);
     if (self->t->type != TOKEN_TYPE_RPAREN)
         assert(!"unexpected token, expected ')', parameters not implemented btw");
@@ -81,7 +84,33 @@ StatementNode* parser_make_declaration_definition_or_initialization(Parser* self
         assert(!"unexpected token, expected '{'");
     parser_next(self);
     List* body = parser_make_statements(self);
-    return (StatementNode*) new_func_def_node(target, type, (List*) new_array_list(), body);
+    return new_func_def_node(target, type, (List*) new_array_list(), body);
+}
+
+DeclStmtNode* parser_resume_declaration_statement(Parser* self, Token* target, TypeNode* type)
+{
+    List* declarations = (List*) new_array_list();
+    if (self->t->type == TOKEN_TYPE_ASSIGN) {
+        parser_next(self);
+        ExpressionNode* value = parser_make_expression(self);
+        declarations->add(declarations, new_initialization_node(type, target, value));
+    } else {
+        declarations->add(declarations, new_declaration_node(type, target));
+    }
+    while (self->t->type == TOKEN_TYPE_COMMA) {
+        TypeNode* type = parser_make_type(self);
+        Token* target = self->t;
+        parser_next(self);
+        if (self->t->type == TOKEN_TYPE_ASSIGN) {
+            parser_next(self);
+            ExpressionNode* value = parser_make_expression(self);
+            declarations->add(declarations, new_initialization_node(type, target, value));
+        } else {
+            declarations->add(declarations, new_declaration_node(type, target));
+        }
+    }
+    check_and_skip_newline(self);
+    return new_declaration_statement_node(declarations);
 }
 
 TypeNode* parser_make_type(Parser* self)
@@ -100,7 +129,16 @@ TypeNode* parser_make_type(Parser* self)
 
 ExpressionNode* parser_make_expression(Parser* self)
 {
-    if (self->t->type == TOKEN_TYPE_INT_LITERAL) {
+    return parser_make_value(self);
+}
+
+ExpressionNode* parser_make_value(Parser* self)
+{
+    if (self->t->type == TOKEN_TYPE_IDENTIFIER) {
+        Token* token = self->t;
+        parser_next(self);
+        return (ExpressionNode*) new_symbol_node(token);
+    } else if (self->t->type == TOKEN_TYPE_INT_LITERAL) {
         Token* token = self->t;
         parser_next(self);
         return (ExpressionNode*) new_int_node(token);
@@ -115,6 +153,13 @@ void parser_skip_newline(Parser* self)
         parser_next(self);
 }
 
+void check_and_skip_newline(Parser* self)
+{
+    if (self->t->type != TOKEN_TYPE_EOL)
+        assert(!"expected ';'");
+    parser_skip_newline(self);
+}
+
 void parser_next(Parser* self)
 {
     self->index++;
diff --git a/parser.h b/parser.h
index c71e9f8..36181b3 100644
--- a/parser.h
+++ b/parser.h
@@ -23,6 +23,7 @@ typedef enum TokenType {
     TOKEN_TYPE_RBRACE,
     TOKEN_TYPE_LBRACKET,
     TOKEN_TYPE_RBRACKET,
+    TOKEN_TYPE_COMMA,
     TOKEN_TYPE_ASSIGN,
     TOKEN_TYPE_EQUAL,
     TOKEN_TYPE_PLUS,
@@ -74,6 +75,7 @@ void delete_node_inheriter(Node* self);
 typedef enum StatementNodeType {
     STATEMENT_TYPE_FUNC_DEF,
     STATEMENT_TYPE_RETURN,
+    STATEMENT_TYPE_DECLARATION,
     STATEMENT_TYPE_EXPRESSION,
 } StatementNodeType;
 
@@ -88,6 +90,7 @@ typedef struct StatementNode {
 typedef enum ExpressionNodeType {
     EXPRESSION_TYPE_ASSIGNMENT,
     EXPRESSION_TYPE_BINARY_OPERATION,
+    EXPRESSION_TYPE_SYMBOL,
     EXPRESSION_TYPE_INT,
 } ExpressionNodeType;
 
@@ -111,6 +114,27 @@ typedef struct TypeNode {
     TypeNodeType node_type;
 } TypeNode;
 
+typedef enum DeclarationNodeType {
+    DECLARATION_TYPE_DEFAULT,
+    DECLARATION_TYPE_INITIALIZATION,
+} DeclarationNodeType;
+
+const char* declaration_node_type_to_string(DeclarationNodeType type);
+
+typedef struct DeclarationNode {
+    void (*delete)(struct DeclarationNode* self);
+    char* (*to_string)(struct DeclarationNode* self);
+    DeclarationNodeType node_type;
+    TypeNode* value_type;
+    Token* target;
+} DeclarationNode;
+
+DeclarationNode* new_declaration_node(TypeNode* value_type, Token* target);
+void delete_declaration_node(DeclarationNode* self);
+char* declaration_node_to_string(DeclarationNode* self);
+
+char* declaration_nodes_to_string(List* declarations);
+
 typedef struct FuncDefNode {
     void (*delete)(struct FuncDefNode* self);
     char* (*to_string)(struct FuncDefNode* self);
@@ -140,6 +164,30 @@ ReturnNode* new_return_node(ExpressionNode* value);
 void delete_return_node(ReturnNode* self);
 char* return_node_to_string(ReturnNode* self);
 
+typedef struct Initialization {
+    void (*delete)(struct Initialization* self);
+    char* (*to_string)(struct Initialization* self);
+    DeclarationNodeType node_type;
+    TypeNode* value_type;
+    Token* target;
+    ExpressionNode* value;
+} Initialization;
+
+Initialization* new_initialization_node(TypeNode* value_type, Token* target, ExpressionNode* value);
+void delete_initialization_node(Initialization* self);
+char* initialization_node_to_string(Initialization* self);
+
+typedef struct DeclStmtNode {
+    void (*delete)(struct DeclStmtNode* self);
+    char* (*to_string)(struct DeclStmtNode* self);
+    StatementNodeType node_type;
+    List* declarations;
+} DeclStmtNode;
+
+DeclStmtNode* new_declaration_statement_node(List* declarations);
+void delete_declaration_statement_node(DeclStmtNode* self);
+char* declaration_statement_node_to_string(DeclStmtNode* self);
+
 typedef struct ExprStmtNode {
     void (*delete)(struct ExprStmtNode* self);
     char* (*to_string)(struct ExprStmtNode* self);
@@ -163,7 +211,7 @@ void delete_keyword_type_node(KeywordTypeNode* self);
 char* keyword_type_node_to_string(KeywordTypeNode* self);
 
 typedef enum AssignmentType {
-    ASSIGNMENT_TYPE_NONE,
+    ASSIGNMENT_TYPE_DEFAULT,
 } AssignmentType;
 
 const char* assignment_type_to_string(AssignmentType type);
@@ -200,6 +248,17 @@ BinaryOperationNode* new_binary_operation_node(BinaryOperationType operation_typ
 void delete_binary_operation_node(BinaryOperationNode* self);
 char* binary_operation_to_string(BinaryOperationNode* self);
 
+typedef struct SymbolNode {
+    void (*delete)(struct SymbolNode* self);
+    char* (*to_string)(struct SymbolNode* self);
+    ExpressionNodeType node_type;
+    Token* token;
+} SymbolNode;
+
+SymbolNode* new_symbol_node(Token* token);
+void delete_symbol_node(SymbolNode* self);
+char* symbol_node_to_string(SymbolNode* self);
+
 typedef struct IntNode {
     void (*delete)(struct IntNode* self);
     char* (*to_string)(struct IntNode* self);
@@ -225,9 +284,13 @@ void parser_next(Parser* self);
 List* parser_make_statements(Parser* self);
 StatementNode* parser_make_statement(Parser* self);
 StatementNode* parser_make_declaration_definition_or_initialization(Parser* self);
+FuncDefNode* parser_resume_function_definition(Parser* self, Token* target, TypeNode* type);
+DeclStmtNode* parser_resume_declaration_statement(Parser* self, Token* target, TypeNode* type);
 TypeNode* parser_make_type(Parser* self);
 ReturnNode* parser_make_return(Parser* self);
 ExpressionNode* parser_make_expression(Parser* self);
+ExpressionNode* parser_make_value(Parser* self);
 void parser_skip_newline(Parser* self);
+void check_and_skip_newline(Parser* self);
 
 List* parse(List* tokens);
-- 
2.25.1

