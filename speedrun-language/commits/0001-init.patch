From 6a8b54c8a218009657ac08f1e095aca6045aea45 Mon Sep 17 00:00:00 2001
From: SimonFJ20 <simonfromjakobsen@gmail.com>
Date: Tue, 21 Jun 2022 03:49:17 +0200
Subject: [PATCH] init

---
 .gitignore            |   1 +
 .vscode/settings.json |   5 ++
 grammar.ne            | 104 +++++++++++++++++++++++++++
 grammar.out.ts        | 159 ++++++++++++++++++++++++++++++++++++++++++
 main.ts               |  29 ++++++++
 out.c                 |  10 +++
 run.sh                |   1 +
 test.splang           |   1 +
 8 files changed, 310 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 .vscode/settings.json
 create mode 100644 grammar.ne
 create mode 100644 grammar.out.ts
 create mode 100644 main.ts
 create mode 100644 out.c
 create mode 100755 run.sh
 create mode 100644 test.splang

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..aca7928
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1 @@
+*out*
diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..2c7ddc5
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,5 @@
+{
+    "deno.enable": true,
+    "deno.lint": true,
+    "deno.unstable": true
+}
\ No newline at end of file
diff --git a/grammar.ne b/grammar.ne
new file mode 100644
index 0000000..9bc2a41
--- /dev/null
+++ b/grammar.ne
@@ -0,0 +1,104 @@
+@preprocessor typescript
+
+@{%
+import moo from "https://deno.land/x/moo@0.5.1.1/index.ts";
+const { compile, keywords } = moo;
+const lexer = compile({
+    nl:         {match: /[\n;]+/, lineBreaks: true},
+    ws:         /[ \t]+/,
+    comment_sl: /\/\/.*?$/,
+    comment_ml: {match: /\*[^*]*\*+(?:[^/*][^*]*\*+)*/, lineBreaks: true},
+    float:      /\-?(?:(?:0|(?:[1-9][0-9]*))\.[0-9]+)/,
+    hex:        /0x[0-9a-fA-F]+/,
+    int:        /0|(?:[1-9][0-9]*)/,
+    char:       {match: /'(?:[^'\\]|\\[\s\S])'/, value: s => s.slice(1, -1), lineBreaks: true},
+    string:     {match: /"(?:[^"\\]|\\[\s\S])*"/, value: s => s.slice(1, -1), lineBreaks: true},
+    name:       {match: /[a-zA-Z0-9_]+/, type: keywords({
+        keyword: ['func', 'return', 'if', 'else', 'while', 'for', 'break', 'continue', 'let', 'import', 'struct', 'new', 'delete']
+    })},
+    dot:        '.',
+
+    heavyarrow: '=>',
+    thinarrow:  '->',
+
+    lparen:     '(',
+    rparen:     ')',
+    lbrace:     '{',
+    rbrace:     '}',
+    lbracket:   '[',
+    rbracket:   ']',
+    comma:      ',',
+    
+    plus:       '+',
+    minus:      '-',
+    powerof:    '^^',
+    multiply:   '*',
+    divide:     '/',
+    modulus:    '%',
+
+    log_and:    '&&',
+    log_or:     '||',
+
+    bit_and:    '&',
+    bit_or:     '|',
+    bit_xor:    '^',
+    bit_not:    '~',
+    bit_rights: '>>>',
+    bit_right:  '>>',
+    bit_left:   '<<',
+
+    cmp_e:      '==',
+    cmp_ne:     '!=',
+    cmp_lte:    '<=',
+    cmp_gte:    '>=',
+    cmp_lt:     '<',
+    cmp_gt:     '>',
+
+    log_not:    '!',
+
+    infer:     ':=',
+    assign:     '=',
+
+    qmark:      '?',
+    colon:      ':',
+});
+%}
+
+@lexer lexer
+
+
+statements  ->  (_ statement (_nl_ statement):*):? _
+    {% v => (v[0] ? [v[0][1], ...v[0][2].map((v: string) => v[1])] : []).map(v => `${v};\n`) %}
+
+statement   ->  expression
+
+expression  ->  add_sub
+
+add_sub     ->  add_sub _ "+" _ mul_div_mod
+                    {% v => `(${v[0]} + ${v[4]})` %}
+            |   add_sub _ "-" _ mul_div_mod
+                    {% v => `(${v[0]} - ${v[4]})` %}
+            |   mul_div_mod
+
+mul_div_mod ->  mul_div_mod _ "*" _ value
+                    {% v => `(${v[0]} * ${v[4]})` %}
+            |   mul_div_mod _ "/" _ value
+                    {% v => `(${v[0]} / ${v[4]})` %}
+            |   mul_div_mod _ "%" _ value
+                    {% v => `(${v[0]} % ${v[4]})` %}
+            |   value
+
+value       ->  %int
+                    {% v => `${v[0].value}` %}
+            |   %string
+                    {% v => `"${v[0].value}"` %}
+            |   "(" _ expression _ ")"
+                    {% v => `(${v[2]})` %} 
+
+_           ->  __:?
+__          ->  (%ws|%nl|%comment_sl|%comment_ml):+
+
+_nl_        ->  sl_ (%nl sl_):+
+
+sl_         ->  sl__:?
+sl__        ->  (%ws|%comment_sl|%comment_ml):+
diff --git a/grammar.out.ts b/grammar.out.ts
new file mode 100644
index 0000000..3d7c73c
--- /dev/null
+++ b/grammar.out.ts
@@ -0,0 +1,159 @@
+// Generated automatically by nearley, version 2.20.1
+// http://github.com/Hardmath123/nearley
+// Bypasses TS6133. Allow declared but unused functions.
+// @ts-ignore
+function id(d: any[]): any { return d[0]; }
+declare var int: any;
+declare var string: any;
+declare var ws: any;
+declare var nl: any;
+declare var comment_sl: any;
+declare var comment_ml: any;
+
+import moo from "https://deno.land/x/moo@0.5.1.1/index.ts";
+const { compile, keywords } = moo;
+const lexer = compile({
+    nl:         {match: /[\n;]+/, lineBreaks: true},
+    ws:         /[ \t]+/,
+    comment_sl: /\/\/.*?$/,
+    comment_ml: {match: /\*[^*]*\*+(?:[^/*][^*]*\*+)*/, lineBreaks: true},
+    float:      /\-?(?:(?:0|(?:[1-9][0-9]*))\.[0-9]+)/,
+    hex:        /0x[0-9a-fA-F]+/,
+    int:        /0|(?:[1-9][0-9]*)/,
+    char:       {match: /'(?:[^'\\]|\\[\s\S])'/, value: s => s.slice(1, -1), lineBreaks: true},
+    string:     {match: /"(?:[^"\\]|\\[\s\S])*"/, value: s => s.slice(1, -1), lineBreaks: true},
+    name:       {match: /[a-zA-Z0-9_]+/, type: keywords({
+        keyword: ['func', 'return', 'if', 'else', 'while', 'for', 'break', 'continue', 'let', 'import', 'struct', 'new', 'delete']
+    })},
+    dot:        '.',
+
+    heavyarrow: '=>',
+    thinarrow:  '->',
+
+    lparen:     '(',
+    rparen:     ')',
+    lbrace:     '{',
+    rbrace:     '}',
+    lbracket:   '[',
+    rbracket:   ']',
+    comma:      ',',
+    
+    plus:       '+',
+    minus:      '-',
+    powerof:    '^^',
+    multiply:   '*',
+    divide:     '/',
+    modulus:    '%',
+
+    log_and:    '&&',
+    log_or:     '||',
+
+    bit_and:    '&',
+    bit_or:     '|',
+    bit_xor:    '^',
+    bit_not:    '~',
+    bit_rights: '>>>',
+    bit_right:  '>>',
+    bit_left:   '<<',
+
+    cmp_e:      '==',
+    cmp_ne:     '!=',
+    cmp_lte:    '<=',
+    cmp_gte:    '>=',
+    cmp_lt:     '<',
+    cmp_gt:     '>',
+
+    log_not:    '!',
+
+    infer:     ':=',
+    assign:     '=',
+
+    qmark:      '?',
+    colon:      ':',
+});
+
+interface NearleyToken {
+  value: any;
+  [key: string]: any;
+};
+
+interface NearleyLexer {
+  reset: (chunk: string, info: any) => void;
+  next: () => NearleyToken | undefined;
+  save: () => any;
+  formatError: (token: never) => string;
+  has: (tokenType: string) => boolean;
+};
+
+interface NearleyRule {
+  name: string;
+  symbols: NearleySymbol[];
+  postprocess?: (d: any[], loc?: number, reject?: {}) => any;
+};
+
+type NearleySymbol = string | { literal: any } | { test: (token: any) => boolean };
+
+interface Grammar {
+  Lexer: NearleyLexer | undefined;
+  ParserRules: NearleyRule[];
+  ParserStart: string;
+};
+
+const grammar: Grammar = {
+  Lexer: lexer,
+  ParserRules: [
+    {"name": "statements$ebnf$1$subexpression$1$ebnf$1", "symbols": []},
+    {"name": "statements$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["_nl_", "statement"]},
+    {"name": "statements$ebnf$1$subexpression$1$ebnf$1", "symbols": ["statements$ebnf$1$subexpression$1$ebnf$1", "statements$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]])},
+    {"name": "statements$ebnf$1$subexpression$1", "symbols": ["_", "statement", "statements$ebnf$1$subexpression$1$ebnf$1"]},
+    {"name": "statements$ebnf$1", "symbols": ["statements$ebnf$1$subexpression$1"], "postprocess": id},
+    {"name": "statements$ebnf$1", "symbols": [], "postprocess": () => null},
+    {"name": "statements", "symbols": ["statements$ebnf$1", "_"], "postprocess": v => (v[0] ? [v[0][1], ...v[0][2].map((v: string) => v[1])] : []).map(v => `${v};\n`)},
+    {"name": "statement", "symbols": ["expression"]},
+    {"name": "expression", "symbols": ["add_sub"]},
+    {"name": "add_sub", "symbols": ["add_sub", "_", {"literal":"+"}, "_", "mul_div_mod"], "postprocess": v => `(${v[0]} + ${v[4]})`},
+    {"name": "add_sub", "symbols": ["add_sub", "_", {"literal":"-"}, "_", "mul_div_mod"], "postprocess": v => `(${v[0]} - ${v[4]})`},
+    {"name": "add_sub", "symbols": ["mul_div_mod"]},
+    {"name": "mul_div_mod", "symbols": ["mul_div_mod", "_", {"literal":"*"}, "_", "value"], "postprocess": v => `(${v[0]} * ${v[4]})`},
+    {"name": "mul_div_mod", "symbols": ["mul_div_mod", "_", {"literal":"/"}, "_", "value"], "postprocess": v => `(${v[0]} / ${v[4]})`},
+    {"name": "mul_div_mod", "symbols": ["mul_div_mod", "_", {"literal":"%"}, "_", "value"], "postprocess": v => `(${v[0]} % ${v[4]})`},
+    {"name": "mul_div_mod", "symbols": ["value"]},
+    {"name": "value", "symbols": [(lexer.has("int") ? {type: "int"} : int)], "postprocess": v => `${v[0].value}`},
+    {"name": "value", "symbols": [(lexer.has("string") ? {type: "string"} : string)], "postprocess": v => `"${v[0].value}"`},
+    {"name": "value", "symbols": [{"literal":"("}, "_", "expression", "_", {"literal":")"}], "postprocess": v => `(${v[2]})`},
+    {"name": "_$ebnf$1", "symbols": ["__"], "postprocess": id},
+    {"name": "_$ebnf$1", "symbols": [], "postprocess": () => null},
+    {"name": "_", "symbols": ["_$ebnf$1"]},
+    {"name": "__$ebnf$1$subexpression$1", "symbols": [(lexer.has("ws") ? {type: "ws"} : ws)]},
+    {"name": "__$ebnf$1$subexpression$1", "symbols": [(lexer.has("nl") ? {type: "nl"} : nl)]},
+    {"name": "__$ebnf$1$subexpression$1", "symbols": [(lexer.has("comment_sl") ? {type: "comment_sl"} : comment_sl)]},
+    {"name": "__$ebnf$1$subexpression$1", "symbols": [(lexer.has("comment_ml") ? {type: "comment_ml"} : comment_ml)]},
+    {"name": "__$ebnf$1", "symbols": ["__$ebnf$1$subexpression$1"]},
+    {"name": "__$ebnf$1$subexpression$2", "symbols": [(lexer.has("ws") ? {type: "ws"} : ws)]},
+    {"name": "__$ebnf$1$subexpression$2", "symbols": [(lexer.has("nl") ? {type: "nl"} : nl)]},
+    {"name": "__$ebnf$1$subexpression$2", "symbols": [(lexer.has("comment_sl") ? {type: "comment_sl"} : comment_sl)]},
+    {"name": "__$ebnf$1$subexpression$2", "symbols": [(lexer.has("comment_ml") ? {type: "comment_ml"} : comment_ml)]},
+    {"name": "__$ebnf$1", "symbols": ["__$ebnf$1", "__$ebnf$1$subexpression$2"], "postprocess": (d) => d[0].concat([d[1]])},
+    {"name": "__", "symbols": ["__$ebnf$1"]},
+    {"name": "_nl_$ebnf$1$subexpression$1", "symbols": [(lexer.has("nl") ? {type: "nl"} : nl), "sl_"]},
+    {"name": "_nl_$ebnf$1", "symbols": ["_nl_$ebnf$1$subexpression$1"]},
+    {"name": "_nl_$ebnf$1$subexpression$2", "symbols": [(lexer.has("nl") ? {type: "nl"} : nl), "sl_"]},
+    {"name": "_nl_$ebnf$1", "symbols": ["_nl_$ebnf$1", "_nl_$ebnf$1$subexpression$2"], "postprocess": (d) => d[0].concat([d[1]])},
+    {"name": "_nl_", "symbols": ["sl_", "_nl_$ebnf$1"]},
+    {"name": "sl_$ebnf$1", "symbols": ["sl__"], "postprocess": id},
+    {"name": "sl_$ebnf$1", "symbols": [], "postprocess": () => null},
+    {"name": "sl_", "symbols": ["sl_$ebnf$1"]},
+    {"name": "sl__$ebnf$1$subexpression$1", "symbols": [(lexer.has("ws") ? {type: "ws"} : ws)]},
+    {"name": "sl__$ebnf$1$subexpression$1", "symbols": [(lexer.has("comment_sl") ? {type: "comment_sl"} : comment_sl)]},
+    {"name": "sl__$ebnf$1$subexpression$1", "symbols": [(lexer.has("comment_ml") ? {type: "comment_ml"} : comment_ml)]},
+    {"name": "sl__$ebnf$1", "symbols": ["sl__$ebnf$1$subexpression$1"]},
+    {"name": "sl__$ebnf$1$subexpression$2", "symbols": [(lexer.has("ws") ? {type: "ws"} : ws)]},
+    {"name": "sl__$ebnf$1$subexpression$2", "symbols": [(lexer.has("comment_sl") ? {type: "comment_sl"} : comment_sl)]},
+    {"name": "sl__$ebnf$1$subexpression$2", "symbols": [(lexer.has("comment_ml") ? {type: "comment_ml"} : comment_ml)]},
+    {"name": "sl__$ebnf$1", "symbols": ["sl__$ebnf$1", "sl__$ebnf$1$subexpression$2"], "postprocess": (d) => d[0].concat([d[1]])},
+    {"name": "sl__", "symbols": ["sl__$ebnf$1"]}
+  ],
+  ParserStart: "statements",
+};
+
+export default grammar;
diff --git a/main.ts b/main.ts
new file mode 100644
index 0000000..5d8ef47
--- /dev/null
+++ b/main.ts
@@ -0,0 +1,29 @@
+import {
+    Grammar,
+    Parser,
+} from "https://deno.land/x/nearley@2.19.7-deno/mod.ts";
+import compiledGrammar from "./grammar.out.ts";
+
+if (Deno.args.length < 1) throw new Error("not enough args");
+
+const parse = (text: string) => {
+    const parser = new Parser(Grammar.fromCompiled(compiledGrammar));
+    parser.feed(text);
+    return parser.results[0];
+};
+
+const text = await Deno.readTextFile(Deno.args[0]);
+const res = parse(text);
+
+const c = `// compiled
+#include <stdio.h>
+#include <stdlib.h>
+#include <stdbool.h>
+#include <stdint.h>
+int main(int argc, char** argv)
+{
+    ${res}
+}
+`;
+
+await Deno.writeTextFile("out.c", c);
diff --git a/out.c b/out.c
new file mode 100644
index 0000000..4406c24
--- /dev/null
+++ b/out.c
@@ -0,0 +1,10 @@
+// compiled
+#include <stdio.h>
+#include <stdlib.h>
+#include <stdbool.h>
+#include <stdint.h>
+int main(int argc, char** argv)
+{
+    (1 + (2 * 3));
+
+}
diff --git a/run.sh b/run.sh
new file mode 100755
index 0000000..049c0fd
--- /dev/null
+++ b/run.sh
@@ -0,0 +1 @@
+nearleyc grammar.ne > grammar.out.ts && deno run --allow-read --allow-write main.ts $1
\ No newline at end of file
diff --git a/test.splang b/test.splang
new file mode 100644
index 0000000..8302cda
--- /dev/null
+++ b/test.splang
@@ -0,0 +1 @@
+1 + 2 * 3
\ No newline at end of file
-- 
2.25.1

