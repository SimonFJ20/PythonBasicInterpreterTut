From 79c1b2e8975c3c6df444a716c54d7bbcf4b34386 Mon Sep 17 00:00:00 2001
From: SimonFJ20 <simonfromjakobsen@gmail.com>
Date: Sat, 7 May 2022 04:50:56 +0200
Subject: [PATCH] return statements

---
 compiler.c      | 57 +++++++++++++++++++++++++++++++++++++++----------
 compiler.h      | 10 +++++++++
 examples/main.c |  2 +-
 3 files changed, 57 insertions(+), 12 deletions(-)

diff --git a/compiler.c b/compiler.c
index 36c0a17..442e51e 100644
--- a/compiler.c
+++ b/compiler.c
@@ -6,11 +6,13 @@
 
 Compiler* new_compiler(List* ast)
 {
-    static_assert(sizeof(Compiler) == 16, "incomplete construction of Compiler");
+    static_assert(sizeof(Compiler) == 32, "incomplete construction of Compiler");
     Compiler* self = calloc(1, sizeof(Compiler));
     *self = (Compiler) {
         .ast = ast,
         .assembly = new_string_builder(),
+        .inside_function = false,
+        .current_function_name = NULL,
     };
     return self;
 }
@@ -21,11 +23,6 @@ void delete_compiler(Compiler* self)
     free(self);
 }
 
-// forward definitions
-void compiler_make_statements(Compiler* self, List* statements);
-void compiler_make_statement(Compiler* self, StatementNode* node);
-void compiler_make_function_definition(Compiler* self, FuncDefNode* node);
-
 char* compiler_compile(Compiler* self)
 {
     string_builder_write(self->assembly, ".global _start\n");
@@ -54,6 +51,7 @@ void compiler_make_statement(Compiler* self, StatementNode* node)
     case ST_FUNC_DEF:
         return compiler_make_function_definition(self, (FuncDefNode*) node);
     case ST_RETURN:
+        return compiler_make_return(self, (ReturnNode*) node);
     case ST_EXPRESSION:
     case StatementNodeType_LAST:
     default:
@@ -63,13 +61,50 @@ void compiler_make_statement(Compiler* self, StatementNode* node)
 
 void compiler_make_function_definition(Compiler* self, FuncDefNode* node)
 {
-    string_builder_write_chars(self->assembly, (char*) node->target->value, node->target->length);
+    char* name = chars_to_string((char*) node->target->value, node->target->length);
+
+    self->inside_function = true;
+    self->current_function_name = name;
+
+    string_builder_write(self->assembly, name);
     string_builder_write(self->assembly, ":\n");
-    string_builder_write(self->assembly, "    push %rbp\n");
-    string_builder_write(self->assembly, "    mov %rsp, %rbp\n");
-    //compiler_make_statements(self, node->body);
-    string_builder_write(self->assembly, "    pop %rbp\n");
+    string_builder_write(self->assembly, "    pushq %rbp\n");
+    string_builder_write(self->assembly, "    movq %rsp, %rbp\n");
+    compiler_make_statements(self, node->body);
+    string_builder_write_fmt(self->assembly, ".%s_end:\n", name);
+    string_builder_write(self->assembly, "    popq %rbp\n");
     string_builder_write(self->assembly, "    ret\n");
+
+    self->inside_function = false;
+    self->current_function_name = NULL;
+    
+    free(name);
+}
+
+void compiler_make_return(Compiler* self, ReturnNode* node)
+{
+    assert(self->inside_function);
+    compiler_make_expression(self, node->value);
+    string_builder_write_fmt(self->assembly, "    jmp .%s_end\n", self->current_function_name);
+}
+
+void compiler_make_expression(Compiler* self, ExpressionNode* node)
+{
+    switch (node->type) {
+    case ET_INT:
+        return compiler_make_int_literal(self, (IntNode*) node);
+    case ExpressionNodeType_LAST:
+    default:
+        assert(!"unexpected ExpressionNodeType");
+    }
+}
+
+void compiler_make_int_literal(Compiler* self, IntNode* node)
+{
+    char* value_string = chars_to_string((char*) node->token->value, node->token->length);
+    int value = atoi(value_string);
+    free(value_string);
+    string_builder_write_fmt(self->assembly, "    movl $%d, %%eax\n", value);
 }
 
 char* compile(List* ast)
diff --git a/compiler.h b/compiler.h
index 708ae7d..fe9461d 100644
--- a/compiler.h
+++ b/compiler.h
@@ -1,14 +1,24 @@
 #pragma once
 
+#include <stdbool.h>
 #include "utils.h"
+#include "parser.h"
 
 typedef struct CompilerStruct {
     List* ast;
     StringBuilder* assembly;
+    bool inside_function;
+    char* current_function_name;
 } Compiler;
 
 Compiler* new_compiler(List* ast);
 void delete_compiler(Compiler* self);
 char* compiler_compile(Compiler* self);
+void compiler_make_statements(Compiler* self, List* statements);
+void compiler_make_statement(Compiler* self, StatementNode* node);
+void compiler_make_function_definition(Compiler* self, FuncDefNode* node);
+void compiler_make_return(Compiler* self, ReturnNode* node);
+void compiler_make_expression(Compiler* self, ExpressionNode* node);
+void compiler_make_int_literal(Compiler* self, IntNode* node);
 
 char* compile(List* ast);
diff --git a/examples/main.c b/examples/main.c
index 31a1337..34cf73c 100644
--- a/examples/main.c
+++ b/examples/main.c
@@ -1,5 +1,5 @@
 
 int main()
 {
-    return 0;
+    return 12;
 }
-- 
2.25.1

