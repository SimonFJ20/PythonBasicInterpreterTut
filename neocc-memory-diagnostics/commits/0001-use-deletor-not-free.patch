From aea45cd528b98869a5b39a7e5f84b57db4a81c96 Mon Sep 17 00:00:00 2001
From: SimonFJ20 <simonfromjakobsen@gmail.com>
Date: Wed, 4 May 2022 23:49:14 +0200
Subject: [PATCH] use deletor, not free

---
 arraylist.c | 24 ++++++++++++++++++------
 1 file changed, 18 insertions(+), 6 deletions(-)

diff --git a/arraylist.c b/arraylist.c
index 188695a..cc44b50 100644
--- a/arraylist.c
+++ b/arraylist.c
@@ -5,6 +5,7 @@
 
 ArrayList* new_array_list()
 {
+    LOG_ENTER();
     static_assert(sizeof(List) == 40, "incomplete implementation");
     ArrayList* self = _calloc(1, sizeof(ArrayList));
     *self = (ArrayList) {
@@ -16,40 +17,51 @@ ArrayList* new_array_list()
         .m_length = 0,
         .m_elements = NULL,
     };
-    return self;
+    LOG_RETURN(ArrayList*, self);
+	LOG_LEAVE();
 }
 
 void delete_array_list(ArrayList* self)
 {
+    LOG_ENTER();
     _free(self->m_elements);
     _free(self);
+	LOG_LEAVE();
 }
 
 size_t array_list_length(ArrayList* self)
 {
-    return self->m_length;
+    LOG_ENTER();
+    LOG_RETURN(size_t, self->m_length);
+	LOG_LEAVE();
 }
 
 void* array_list_get(ArrayList* self, int index)
 {
+    LOG_ENTER();
     if (index < 0)
-        return array_list_get(self, self->m_length - index);
+        LOG_RETURN(void*, array_list_get(self, self->m_length - index));
     assert(index < self->m_length && "index out of range");
-    return self->m_elements[index];
+    LOG_RETURN(void*, self->m_elements[index]);
+	LOG_LEAVE();
 }
 
 void array_list_add(ArrayList* self, void* element)
 {
+    LOG_ENTER();
     self->m_length++;
     if (!self->m_elements)
         self->m_elements = _calloc(1, sizeof(void*));
     else
         self->m_elements = _realloc(self->m_elements, sizeof(void*) * self->m_length);
     self->m_elements[self->m_length - 1] = element;
+	LOG_LEAVE();
 }
 
-void array_list_delete_all(ArrayList* self, void (*_free)(void* element))
+void array_list_delete_all(ArrayList* self, void (*deletor)(void* element))
 {
+    LOG_ENTER();
     for (int i = 0; i < self->m_length; i++)
-        _free(self->m_elements[i]);
+        deletor(self->m_elements[i]);
+	LOG_LEAVE();
 }
-- 
2.25.1

