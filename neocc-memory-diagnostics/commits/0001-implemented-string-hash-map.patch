From cc3dc2ee23bfb20149c7e2191acaeb3ad717ea5c Mon Sep 17 00:00:00 2001
From: SimonFJ20 <simonfromjakobsen@gmail.com>
Date: Tue, 10 May 2022 02:04:54 +0200
Subject: [PATCH] implemented string hash map

---
 hash_map.c | 105 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 utils.c    |   8 ++++
 utils.h    |  55 +++++++++++++++++++++++++++-
 3 files changed, 167 insertions(+), 1 deletion(-)
 create mode 100644 hash_map.c

diff --git a/hash_map.c b/hash_map.c
new file mode 100644
index 0000000..f6d8ad7
--- /dev/null
+++ b/hash_map.c
@@ -0,0 +1,105 @@
+#include <stdint.h>
+#include <stdlib.h>
+#include <string.h>
+#include <assert.h>
+#include "utils.h"
+
+
+uint64_t hash_string(const char* value)
+{
+    // https://cp-algorithms.com/string/string-hashing.html
+    // 0 <= char <= 127
+    const int p = 131;
+    const int m = 1e9 + 9;
+    size_t string_length = strlen(value);
+    long long hash_value = 0;
+    long long p_pow = 1;
+    for (int i = 0; i < string_length; i++) {
+        hash_value = (hash_value + (value[i] + 1) * p_pow) % m;
+        p_pow = (p_pow * p) % m;
+    }
+    return hash_value;
+}
+
+StringHashMapElement* new_string_hash_map_element(char* key, uint64_t hash, void* value)
+{
+    static_assert(sizeof(StringHashMapElement) == 24, "incomplete construction of StringHashMapElement");
+    StringHashMapElement* self = calloc(1, sizeof(StringHashMapElement));
+    *self = (StringHashMapElement) {
+        .key = key,
+        .hash = hash,
+        .value = value,
+    };
+    return self;
+}
+
+void delete_string_hash_map_element(StringHashMapElement* self)
+{
+    free(self->key);
+    free(self);
+}
+
+StringHashMap* new_string_hash_map()
+{
+    static_assert(sizeof(Map) == 40, "incomplete implementation of Map");
+    static_assert(sizeof(StringHashMap) == 56, "incomplete construction of StringHashMap");
+    StringHashMap* self = calloc(1, sizeof(StringHashMap));
+    *self = (StringHashMap) {
+        .delete = delete_string_hash_map,
+        .length = string_hash_map_length,
+        .get = string_hash_map_get,
+        .set = string_hash_map_set,
+        .contains_key = string_hash_map_contains_key,
+        .m_length = 0,
+        .m_elements = (List*) new_array_list(),
+    };
+    return self;
+}
+
+void delete_string_hash_map(StringHashMap* self)
+{
+    list_delete_all_and_self(self->m_elements, (void (*)(void*)) delete_string_hash_map_element);
+    free(self);
+}
+
+size_t string_hash_map_length(StringHashMap* self)
+{
+    return self->m_length;
+}
+
+void* string_hash_map_get(StringHashMap* self, const char* string)
+{
+    // TODO binary search
+    uint64_t hash = hash_string(string);
+    for (int i = 0; i < self->m_elements->length(self->m_elements); i++) {
+        StringHashMapElement* element = self->m_elements->get(self->m_elements, i);
+        if (element->hash == hash)
+            return element->value;
+    }
+    assert(!"element with key not found");
+}
+
+void string_hash_map_set(StringHashMap* self, const char* string, void* value)
+{
+    uint64_t hash = hash_string(string);
+    for (int i = 0; i < self->m_elements->length(self->m_elements); i++) {
+        StringHashMapElement* element = self->m_elements->get(self->m_elements, i);
+        if (element->hash == hash) {
+            element->value = value;
+            return;
+        }
+    }
+    self->m_elements->add(self->m_elements, new_string_hash_map_element(copy_string(string), hash, value));
+}
+
+bool string_hash_map_contains_key(StringHashMap* self, const char* string)
+{
+    // TODO binary search
+    uint64_t hash = hash_string(string);
+    for (int i = 0; i < self->m_elements->length(self->m_elements); i++) {
+        StringHashMapElement* element = self->m_elements->get(self->m_elements, i);
+        if (element->hash == hash)
+            return true;
+    }
+    return false;
+}
diff --git a/utils.c b/utils.c
index 8a35edb..29e8e09 100644
--- a/utils.c
+++ b/utils.c
@@ -26,3 +26,11 @@ char* chars_to_string(char* chars, size_t amount)
     strncpy(buffer, chars, amount);
     return buffer;
 }
+
+char* copy_string(const char* string)
+{
+    size_t length = strlen(string);
+    char* copy = calloc(length + 1, sizeof(char));
+    strncpy(copy, string, length);
+    return copy;
+}
diff --git a/utils.h b/utils.h
index 9061a94..2c995bd 100644
--- a/utils.h
+++ b/utils.h
@@ -1,8 +1,9 @@
 #pragma once
 
-#include <assert.h>
 #include <stdio.h>
 #include <stdlib.h>
+#include <stdbool.h>
+#include <stdint.h>
 
 typedef struct List {
     void (*delete)(struct List* self);
@@ -35,6 +36,57 @@ void array_list_add(ArrayList* self, void* element);
 void array_list_free_all(ArrayList* self);
 void array_list_delete_all(ArrayList* self, void (*)(void*));
 
+typedef struct Map {
+    void (*delete)(struct Map* self);
+    size_t (*length)(struct Map* self);
+    void* (*get)(struct Map* self, const char* string);
+    void (*set)(struct Map* self, const char* string, void* value);
+    bool (*contains_key)(struct Map* self, const char* string);
+    // bool (*contains_value)(struct Map* self, void* value);
+    // void (*remove_key)(struct Map* self, const char* string);
+    // void (*remove_value)(struct Map* self, void* value);
+    // List* (*keys)(struct Map* self);
+    // List* (*values)(struct Map* self);
+} Map;
+
+uint64_t hash_string(const char* value);
+
+typedef struct StringHashMapElement {
+    char* key;
+    uint64_t hash;
+    void* value;
+} StringHashMapElement;
+
+StringHashMapElement* new_string_hash_map_element(char* key, uint64_t hash, void* value);
+void delete_string_hash_map_element(StringHashMapElement* self);
+
+typedef struct StringHashMap {
+    void (*delete)(struct StringHashMap* self);
+    size_t (*length)(struct StringHashMap* self);
+    void* (*get)(struct StringHashMap* self, const char* string);
+    void (*set)(struct StringHashMap* self, const char* string, void* value);
+    bool (*contains_key)(struct StringHashMap* self, const char* string);
+    // bool (*contains_value)(struct StringHashMap* self, void* value);
+    // void (*remove_key)(struct StringHashMap* self, const char* string);
+    // void (*remove_value)(struct StringHashMap* self, void* value);
+    // List* (*keys)(struct StringHashMap* self);
+    // List* (*values)(struct StringHashMap* self);
+    size_t m_length;
+    List* m_elements;
+} StringHashMap;
+
+StringHashMap* new_string_hash_map();
+void delete_string_hash_map(StringHashMap* self);
+size_t string_hash_map_length(StringHashMap* self);
+void* string_hash_map_get(StringHashMap* self, const char* string);
+void string_hash_map_set(StringHashMap* self, const char* string, void* value);
+bool string_hash_map_contains_key(StringHashMap* self, const char* string);
+// bool string_hash_map_contains_value(StringHashMap* self, void* value);
+// void string_hash_map_remove_key(StringHashMap* self, const char* string);
+// void string_hash_map_remove_value(StringHashMap* self, void* value);
+// List* string_hash_map_keys(StringHashMap* self);
+// List* string_hash_map_values(StringHashMap* self);
+
 typedef struct FileReader {
     FILE* fp;
 } FileReader;
@@ -66,6 +118,7 @@ void string_builder_write(StringBuilder* self, char* string);
 void string_builder_write_fmt(StringBuilder* self, const char* fmt, ...);
 
 char* chars_to_string(char* chars, size_t amount);
+char* copy_string(const char* string);
 void println_and_free(char* string);
 void list_delete_all_and_self(List* list, void (*)(void*));
 char* read_file(const char* path);
-- 
2.25.1

