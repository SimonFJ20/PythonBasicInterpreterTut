From 92f95f3aca03ff82580ddf4158e804f5e43b2421 Mon Sep 17 00:00:00 2001
From: SimonFJ20 <simonfromjakobsen@gmail.com>
Date: Fri, 29 Jul 2022 04:52:05 +0200
Subject: [PATCH] init

---
 .gitignore  |   1 +
 Cargo.lock  |   7 ++
 Cargo.toml  |   8 ++
 README.md   |   4 +
 src/main.rs | 247 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 5 files changed, 267 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 Cargo.lock
 create mode 100644 Cargo.toml
 create mode 100644 README.md
 create mode 100644 src/main.rs

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..ea8c4bf
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1 @@
+/target
diff --git a/Cargo.lock b/Cargo.lock
new file mode 100644
index 0000000..4ed385b
--- /dev/null
+++ b/Cargo.lock
@@ -0,0 +1,7 @@
+# This file is automatically @generated by Cargo.
+# It is not intended for manual editing.
+version = 3
+
+[[package]]
+name = "self-host-any-percent"
+version = "0.1.0"
diff --git a/Cargo.toml b/Cargo.toml
new file mode 100644
index 0000000..68c99ce
--- /dev/null
+++ b/Cargo.toml
@@ -0,0 +1,8 @@
+[package]
+name = "self-host-any-percent"
+version = "0.1.0"
+edition = "2021"
+
+# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
+
+[dependencies]
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..dea0a9e
--- /dev/null
+++ b/README.md
@@ -0,0 +1,4 @@
+
+# self-host-any-percent
+
+The title's the premise
diff --git a/src/main.rs b/src/main.rs
new file mode 100644
index 0000000..0320fd1
--- /dev/null
+++ b/src/main.rs
@@ -0,0 +1,247 @@
+use core::panic;
+
+#[derive(Debug)]
+pub enum Error {
+    LexerError(String),
+    ParserError(String),
+}
+
+#[derive(Debug)]
+pub enum ParsedExpression {
+    Expression(Box<ParsedExpression>, Span),
+    Add(Box<ParsedExpression>, Box<ParsedExpression>, Span),
+    Int(String, Span),
+    Invalid(Error, Span),
+}
+
+impl ParsedExpression {
+    pub fn span(&self) -> &Span {
+        match self {
+            ParsedExpression::Expression(_, span) => span,
+            ParsedExpression::Add(_, _, span) => span,
+            ParsedExpression::Int(_, span) => span,
+            ParsedExpression::Invalid(_, span) => span,
+        }
+    }
+}
+
+pub fn parse(file_id: FileId, text: &[u8]) -> (ParsedExpression, Vec<Error>) {
+    let (tokens, errors) = tokenize(file_id, text);
+    let mut parser = Parser::new(file_id, tokens, errors);
+    let expression = parser.parse_expression();
+    (expression, parser.errors)
+}
+
+pub struct Parser {
+    file_id: FileId,
+    tokens: Vec<Token>,
+    errors: Vec<Error>,
+    index: usize,
+}
+
+impl Parser {
+    pub fn new(file_id: FileId, tokens: Vec<Token>, errors: Vec<Error>) -> Self {
+        Self {
+            file_id,
+            tokens,
+            errors,
+            index: 0,
+        }
+    }
+
+    pub fn parse_expression(&mut self) -> ParsedExpression {
+        self.parse_prec_11()
+    }
+
+    pub fn parse_prec_11(&mut self) -> ParsedExpression {
+        let left = self.parse_value();
+        if self.index >= self.tokens.len() {
+            return left;
+        }
+        let operator = self.tokens[self.index].clone();
+        match operator.contents {
+            TokenContents::Plus => {
+                self.index += 1;
+                let right = self.parse_prec_11();
+                let span = Span::merge(left.span(), right.span());
+                ParsedExpression::Add(Box::new(left), Box::new(right), span)
+            }
+            _ => left,
+        }
+    }
+
+    pub fn parse_value(&mut self) -> ParsedExpression {
+        let token = self.tokens[self.index].clone();
+        self.index += 1;
+        match token.contents {
+            TokenContents::Int(value) => ParsedExpression::Int(value, token.span),
+            TokenContents::LParen => {
+                let expr = self.parse_expression();
+                match self.tokens[self.index].contents {
+                    TokenContents::RParen => {
+                        let rparen = self.tokens[self.index].clone();
+                        self.index += 1;
+                        ParsedExpression::Expression(
+                            Box::new(expr),
+                            Span::merge(&token.span, &rparen.span),
+                        )
+                    }
+                    _ => ParsedExpression::Invalid(
+                        Error::ParserError("unexpected token".into()),
+                        Span::merge(&token.span, &self.tokens[self.index].span),
+                    ),
+                }
+            }
+            _ => {
+                ParsedExpression::Invalid(Error::ParserError("unexpected token".into()), token.span)
+            }
+        }
+    }
+}
+
+#[derive(Debug, Clone)]
+pub enum TokenContents {
+    Int(String),
+    Plus,
+    LParen,
+    RParen,
+    EOF,
+    Invalid,
+}
+
+pub type FileId = usize;
+
+#[derive(Debug, Clone, Copy)]
+pub struct Span {
+    pub file_id: FileId,
+    pub start: usize,
+    pub end: usize,
+}
+
+impl Span {
+    pub fn new(file_id: FileId, start: usize, end: usize) -> Self {
+        Self {
+            file_id,
+            start,
+            end,
+        }
+    }
+
+    pub fn contains(self, span: Span) -> bool {
+        self.file_id == span.file_id && span.start >= self.start && span.end >= self.end
+    }
+
+    pub fn merge(a: &Span, b: &Span) -> Self {
+        if a.file_id != b.file_id {
+            panic!("file_id must match")
+        }
+        if a.start >= b.end {
+            panic!("a must start before b ends")
+        }
+        Self {
+            file_id: a.file_id,
+            start: a.start,
+            end: b.end,
+        }
+    }
+}
+
+#[derive(Debug, Clone)]
+pub struct Token {
+    pub contents: TokenContents,
+    pub span: Span,
+}
+
+impl Token {
+    pub fn new(contents: TokenContents, span: Span) -> Self {
+        Self { contents, span }
+    }
+}
+
+pub fn tokenize(file_id: FileId, text: &[u8]) -> (Vec<Token>, Vec<Error>) {
+    use TokenContents::*;
+    let index = &mut 0;
+    let mut tokens: Vec<Token> = Vec::new();
+    let mut errors: Vec<Error> = Vec::new();
+    while *index < text.len() {
+        match text[*index] {
+            b'+' => tokens.push(single_char_tok(file_id, index, Plus)),
+            b'(' => tokens.push(single_char_tok(file_id, index, LParen)),
+            b')' => tokens.push(single_char_tok(file_id, index, RParen)),
+            _ => match make_token(file_id, text, index) {
+                Ok(token) => tokens.push(token),
+                Err(error) => errors.push(error),
+            },
+        }
+    }
+    (tokens, errors)
+}
+
+fn single_char_tok(file_id: FileId, index: &mut usize, contents: TokenContents) -> Token {
+    let start = *index;
+    *index += 1;
+    Token::new(contents, Span::new(file_id, start, *index))
+}
+
+fn make_token(file_id: FileId, text: &[u8], index: &mut usize) -> Result<Token, Error> {
+    while text[*index].is_ascii_whitespace() {
+        *index += 1;
+    }
+    if text[*index] == b'0' {
+        let start = *index;
+        *index += 1;
+        if *index >= text.len() {
+            *index += 1;
+            Ok(Token::new(
+                TokenContents::Int(String::from_utf8_lossy(&text[start..*index]).to_string()),
+                Span::new(file_id, start, *index),
+            ))
+        } else {
+            match text[*index] {
+                b'x' => todo!(),
+                b'o' => todo!(),
+                b'b' => todo!(),
+                _ => Err(Error::LexerError("cannot start literal with 0".into())),
+            }
+        }
+    } else if text[*index].is_ascii_digit() {
+        let start = *index;
+        while *index < text.len() && text[*index].is_ascii_digit() {
+            *index += 1;
+        }
+        Ok(Token::new(
+            TokenContents::Int(String::from_utf8_lossy(&text[start..*index]).to_string()),
+            Span::new(file_id, start, *index),
+        ))
+    } else {
+        let start = *index;
+        *index += 1;
+        match text[start] {
+            b'+' => Ok(Token::new(
+                TokenContents::Plus,
+                Span::new(file_id, start, *index),
+            )),
+            _ => Err(Error::LexerError(format!(
+                "unexpected char '{}' == {}",
+                char::from(text[*index]),
+                text[*index],
+            ))),
+        }
+    }
+}
+
+fn main() {
+    let text = "2 +3";
+    let (tokens, token_errors) = tokenize(0, text.as_bytes());
+    if token_errors.is_empty() {
+        println!("tokens = {:?}", tokens)
+    } else {
+        println!("{:?}", token_errors)
+    }
+    let (parsed, parse_errors) = parse(0, text.as_bytes());
+    if parse_errors.is_empty() {
+        println!("parsed = {:?}", parsed);
+    } else {
+        println!("{:?}", parse_errors);
+    }
+}
-- 
2.25.1

