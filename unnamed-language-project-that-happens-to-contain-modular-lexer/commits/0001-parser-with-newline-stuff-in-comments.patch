From 2ce7afbf31613c7b4a83afe2209e61edd775257f Mon Sep 17 00:00:00 2001
From: SimonFJ20 <simonfromjakobsen@gmail.com>
Date: Sun, 5 Jun 2022 21:06:45 +0200
Subject: [PATCH] parser with newline stuff in comments

---
 examples/math.morbius |   4 +
 lexer.ts              |  16 ++-
 main.ts               |  36 +++++--
 parser.ts             | 228 ++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 272 insertions(+), 12 deletions(-)
 create mode 100644 examples/math.morbius
 create mode 100644 parser.ts

diff --git a/examples/math.morbius b/examples/math.morbius
new file mode 100644
index 0000000..013ef87
--- /dev/null
+++ b/examples/math.morbius
@@ -0,0 +1,4 @@
+2
++ 3 * 4
+2 * 3 + 4
+(2 + 3) * 4
\ No newline at end of file
diff --git a/lexer.ts b/lexer.ts
index b2d815a..1e69f54 100644
--- a/lexer.ts
+++ b/lexer.ts
@@ -10,7 +10,7 @@ export class Position {
     }
 
     public toString(): string {
-        return `{ row: ${this.row}, column: ${this.column} }`
+        return `${this.row}:${this.column}`
     }
 }
 
@@ -21,7 +21,7 @@ export class Span {
     ) {}
 
     public toString(): string {
-        return `{ begin: ${this.begin}, end: ${this.end} }`
+        return `${this.begin} to ${this.end}`
     }
 }
 
@@ -37,6 +37,7 @@ export class Token<TokenType> {
 export class LexerError extends Error {
     public constructor (message: string) {
         super (message);
+        this.name = 'LexerError';
     }
 
     public static fromPosition(pos: Position, message: string) {
@@ -161,6 +162,17 @@ export const identifierRule = <TokenType>(tokenType: TokenType): LexerRule<Token
     };
 }
 
+export const ignorePatternRule = <TokenType>(pattern: RegExp): LexerRule<TokenType> => {
+    return {
+        pattern,
+        handler: (self) => {
+            while (pattern.test(self.text[self.index]))
+                self.step();
+            return null;
+        },
+    };
+}
+
 export const ignoreSingleLineWhitespaceRule = <TokenType>(): LexerRule<TokenType> => {
     return {
         pattern: /^[ \t]/,
diff --git a/main.ts b/main.ts
index 6a3e11e..6de8dcb 100644
--- a/main.ts
+++ b/main.ts
@@ -1,8 +1,6 @@
 import {
     ignoreSingleLineWhitespaceRule,
-    Span,
     charPatternRule,
-    Token,
     tokenize,
     intRule,
     hexRule,
@@ -10,10 +8,12 @@ import {
     ignoreMultiLineComment,
     ignoreSingleLineComment,
     charLiteralRule,
-    stringLiteralRule
+    stringLiteralRule,
+ignorePatternRule
 } from "./lexer.ts";
+import { parse } from "./parser.ts";
 
-enum TokenType {
+export enum TokenType {
     IntLiteral,
     HexLiteral,
     CharLiteral,
@@ -27,9 +27,14 @@ enum TokenType {
     LBracket,
     RBracket,
     Equal,
+    Plus,
+    Minus,
+    Asterisk,
+    Slash,
+    Percentage,
     Colon,
-    NewLine,
-    LineTerminator,
+    // NewLine,
+    // LineTerminator,
 }
 
 const main = () => {
@@ -55,13 +60,24 @@ const main = () => {
         charPatternRule(TokenType.LBracket, '['),
         charPatternRule(TokenType.RBracket, ']'),
         charPatternRule(TokenType.Equal, '='),
+        charPatternRule(TokenType.Plus, '+'),
+        charPatternRule(TokenType.Minus, '-'),
+        charPatternRule(TokenType.Asterisk, '*'),
+        charPatternRule(TokenType.Slash, '/'),
+        charPatternRule(TokenType.Percentage, '%'),
+        charPatternRule(TokenType.Equal, '='),
         charPatternRule(TokenType.Colon, ':'),
-        charPatternRule(TokenType.NewLine, '\r\n'),
-        charPatternRule(TokenType.NewLine, '\n'),
-        charPatternRule(TokenType.LineTerminator, ';'),
+        // charPatternRule(TokenType.NewLine, '\r\n'),
+        // charPatternRule(TokenType.NewLine, '\n'),
+        // charPatternRule(TokenType.LineTerminator, ';'),
+        ignorePatternRule(/^[\r\n;]/),
     ]);
 
-    console.log(tokens)
+    // console.log(tokens)
+
+    const ast = parse(tokens);
+    
+    console.log(ast)
 
 }
 
diff --git a/parser.ts b/parser.ts
new file mode 100644
index 0000000..ffdda38
--- /dev/null
+++ b/parser.ts
@@ -0,0 +1,228 @@
+import { Position, Span, Token } from "./lexer.ts";
+import { TokenType } from "./main.ts";
+
+export class ParserError extends Error {
+    public constructor (message: string) {
+        super (message);
+        this.name = 'ParserError';
+    }
+
+    public static fromPosition(pos: Position, message: string) {
+        return new ParserError(`${message}, at ${pos}`)
+    }
+
+    public static fromSpan(span: Span, message: string) {
+        return new ParserError(`${message}, at ${span}`)
+    }
+}
+
+export class Parser {
+    public index = 0;
+
+    public constructor (
+        public tokens: Token<TokenType>[],
+    ) {}
+
+    public step() {
+        if (this.index >= this.tokens.length)
+            throw ParserError.fromPosition(
+                this.tokens[this.tokens.length - 1].span.end,
+                'unexpected end of file'
+            );
+        this.index++;
+    }
+
+    public current(): Token<TokenType> | null {
+        if (this.index >= this.tokens.length)
+            return null;
+        return this.tokens[this.index];
+    }
+
+    public peekNext(): Token<TokenType> | null {
+        if (this.index >= this.tokens.length)
+            return null;
+        return this.tokens[this.index + 1];
+    }
+}
+
+export enum ExpressionType {
+    Assignment,
+    Addition,
+    Subtraction,
+    Multiplication,
+    Division,
+    Remainder,
+    IntLiteral,
+    CharLiteral,
+    StringLiteral,
+}
+
+export abstract class ExpressionNode {
+    protected constructor (
+        public type: ExpressionType,
+        public span: Span,
+    ) {}
+}
+
+export class AssignmentNode extends ExpressionNode {
+    public constructor (
+        public target: Token<TokenType>,
+        public value: ExpressionNode,
+    ) { super (ExpressionType.Assignment, new Span(target.span.begin, value.span.end)); }
+}
+
+export class AdditionNode extends ExpressionNode {
+    public constructor (
+        public left: ExpressionNode,
+        public right: ExpressionNode
+    ) { super (ExpressionType.Addition, new Span(left.span.begin, right.span.end)); }
+}
+
+export class SubtractionNode extends ExpressionNode {
+    public constructor (
+        public left: ExpressionNode,
+        public right: ExpressionNode
+    ) { super (ExpressionType.Subtraction, new Span(left.span.begin, right.span.end)); }
+}
+
+export class MultiplicationNode extends ExpressionNode {
+    public constructor (
+        public left: ExpressionNode,
+        public right: ExpressionNode
+    ) { super (ExpressionType.Multiplication, new Span(left.span.begin, right.span.end)); }
+}
+
+export class DivisionNode extends ExpressionNode {
+    public constructor (
+        public left: ExpressionNode,
+        public right: ExpressionNode
+    ) { super (ExpressionType.Division, new Span(left.span.begin, right.span.end)); }
+}
+
+export class RemainderNode extends ExpressionNode {
+    public constructor (
+        public left: ExpressionNode,
+        public right: ExpressionNode
+    ) { super (ExpressionType.Remainder, new Span(left.span.begin, right.span.end)); }
+}
+
+export class IntLiteralNode extends ExpressionNode {
+    public constructor (
+        public value: Token<TokenType>,
+    ) { super (ExpressionType.IntLiteral, value.span); }
+}
+
+export class CharLiteralNode extends ExpressionNode {
+    public constructor (
+        public value: Token<TokenType>,
+    ) { super (ExpressionType.CharLiteral, value.span); }
+}
+
+export class StringLiteralNode extends ExpressionNode {
+    public constructor (
+        public value: Token<TokenType>,
+    ) { super (ExpressionType.StringLiteral, value.span); }
+}
+
+export const parse = (tokens: Token<TokenType>[]): ExpressionNode[] => {
+    const self = new Parser(tokens);
+    const expressions: ExpressionNode[] = [];
+    while (self.index < self.tokens.length) {
+        // if (expressions.length !== 0)
+        //     assertNewline(self);
+        expressions.push(parseExpression(self));
+    }
+    return expressions;
+}
+
+export const parseExpression = (self: Parser): ExpressionNode => {
+    return parseAssignment(self);
+}
+
+// export const assertNewline = (self: Parser) => {
+//     const isLineBreak = (self: Parser) =>
+//         self.current()?.type === TokenType.NewLine 
+//         || self.current()?.type === TokenType.LineTerminator;
+
+//     if (!isLineBreak(self))
+//         throw ParserError.fromPosition(self.current()!.span.end, `expected ';' or line break`);
+//     while (self.index < self.tokens.length && isLineBreak(self))
+//         self.step();
+// }
+
+// export const skipNewlines = (self: Parser) => {
+//     while (self.index < self.tokens.length && self.current()?.type === TokenType.NewLine)
+//         self.step();
+// }
+
+export const parseAssignment = (self: Parser): ExpressionNode => {
+    const target = self.current()!;
+    if (target.type !== TokenType.Identifier && self.peekNext()?.type === TokenType.Equal) {
+        self.step();
+        self.step();
+        const value = parseAssignment(self);
+        return new AssignmentNode(target, value);
+    } else
+        return parseAdditionAndSubtraction(self);
+}
+
+export const parseAdditionAndSubtraction = (self: Parser): ExpressionNode => {
+    const left = parseMultiplicationDivisionAndRemainder(self);
+    if (self.current()?.type === TokenType.Plus) {
+        self.step();
+        const right = parseAdditionAndSubtraction(self);
+        return new AdditionNode(left, right);
+    } else if (self.current()?.type === TokenType.Minus) {
+        self.step();
+        const right = parseAdditionAndSubtraction(self);
+        return new SubtractionNode(left, right);
+    } else
+        return left;
+}
+
+export const parseMultiplicationDivisionAndRemainder = (self: Parser): ExpressionNode => {
+    const left = parseValue(self);
+    if (self.current()?.type === TokenType.Asterisk) {
+        self.step();
+        const right = parseMultiplicationDivisionAndRemainder(self);
+        return new MultiplicationNode(left, right)
+    } else if (self.current()?.type === TokenType.Slash) {
+        self.step();
+        const right = parseMultiplicationDivisionAndRemainder(self);
+        return new DivisionNode(left, right)
+    } else if (self.current()?.type === TokenType.Percentage) {
+        self.step();
+        const right = parseMultiplicationDivisionAndRemainder(self);
+        return new RemainderNode(left, right);
+    } else
+        return left;
+}
+
+export const parseValue = (self: Parser): ExpressionNode => {
+    if (self.current()?.type === TokenType.IntLiteral) {
+        const value = self.current()!;
+        self.step();
+        return new IntLiteralNode(value);
+    } else if (self.current()?.type === TokenType.HexLiteral) {
+        const value = self.current()!;
+        self.step();
+        return new IntLiteralNode(value);
+    } else if (self.current()?.type === TokenType.CharLiteral) {
+        const value = self.current()!;
+        self.step();
+        return new CharLiteralNode(value);
+    } else if (self.current()?.type === TokenType.StringLiteral) {
+        const value = self.current()!;
+        self.step();
+        return new StringLiteralNode(value);
+    } else if (self.current()?.type === TokenType.LParen) {
+        self.step();
+        const value = parseExpression(self);
+        if (self.current()?.type !== TokenType.RParen)
+            throw ParserError.fromPosition(self.current()!.span.begin, `expected ')'`);
+        self.step();
+        return value;
+    } else {
+        throw ParserError.fromSpan(self.current()!.span, `unexpected token '${self.current()?.text}'`);
+    }
+}
-- 
2.25.1

